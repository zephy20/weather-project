{"version":3,"sources":["Weather.js","App.js","serviceWorker.js","index.js"],"names":["API","desc","a","b","orderBy","rows","id","numeric","disablePadding","label","EnhancedTableHead","createSortHandler","property","event","_this","props","onRequestSort","_this2","this","_this$props","order","react_default","createElement","TableHead_default","TableRow_default","map","row","TableCell_default","key","align","sortDirection","Tooltip_default","title","placement","enterDelay","TableSortLabel_default","active","direction","onClick","React","Component","Weather","state","selected","data","page","rowsPerPage","handleRequestSort","_this3","setState","handleSelectAllClick","target","checked","n","handleChangePage","handleChangeRowsPerPage","value","isSelected","indexOf","handleDialog","city","name","axios","get","concat","then","res","city_data","list","open","city_name","convertToSingleDay","catch","err","console","log","filter","x","dt_txt","includes","handleClose","lat","lon","_this4","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","_this5","classes","_this$state","emptyRows","Math","min","length","Paper_default","className","root","tableWrapper","Table_default","table","aria-labelledby","Weather_EnhancedTableHead","numSelected","rowCount","TableBody_default","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","tabIndex","component","scope","index_es","bind","main","temp_max","temp_min","style","height","colSpan","TablePagination_default","rowsPerPageOptions","count","backIconButtonProps","aria-label","nextIconButtonProps","onChangePage","onChangeRowsPerPage","Dialog_default","fullWidth","maxWidth","onClose","width","DialogTitle_default","border","margin","padding","maxHeight","moment","format","display","justifyContent","flexWrap","src","weather","icon","alt","description","wind","speed","clouds","all","humidity","DialogContent_default","withStyles","theme","marginTop","spacing","unit","minWidth","overflowX","App","src_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"khBAmBMA,EAAM,mCAEZ,SAASC,EAAKC,EAAGC,EAAGC,GAClB,OAAID,EAAEC,GAAWF,EAAEE,IACT,EAEND,EAAEC,GAAWF,EAAEE,GACV,EAEF,EAmBT,IAAMC,EAAO,CACX,CACEC,GAAI,OACJC,SAAS,EACTC,gBAAgB,EAChBC,MAAO,QAET,CACEH,GAAI,WACJC,SAAS,EACTC,gBAAgB,EAChBC,MAAO,kCAET,CACEH,GAAI,MACJC,SAAS,EACTC,gBAAgB,EAChBC,MAAO,mCAILC,6MACJC,kBAAoB,SAAAC,GAAQ,OAAI,SAAAC,GAC9BC,EAAKC,MAAMC,cAAcH,EAAOD,6EAGzB,IAAAK,EAAAC,KAAAC,EACoBD,KAAKH,MAAxBK,EADDD,EACCC,MAAOhB,EADRe,EACQf,QAEf,OACEiB,EAAAnB,EAAAoB,cAACC,EAAArB,EAAD,KACEmB,EAAAnB,EAAAoB,cAACE,EAAAtB,EAAD,KACGG,EAAKoB,IACJ,SAAAC,GAAG,OACDL,EAAAnB,EAAAoB,cAACK,EAAAzB,EAAD,CACE0B,IAAKF,EAAIpB,GACTuB,MAAqB,SAAdH,EAAIjB,MAAmB,OAAS,SACvCqB,cAAe1B,IAAYsB,EAAIpB,IAAKc,GAEpCC,EAAAnB,EAAAoB,cAACS,EAAA7B,EAAD,CACE8B,MAAM,OACNC,UAAWP,EAAInB,QAAU,aAAe,eACxC2B,WAAY,KAEZb,EAAAnB,EAAAoB,cAACa,EAAAjC,EAAD,CACEkC,OAAQhC,IAAYsB,EAAIpB,GACxB+B,UAAWjB,EACXkB,QAASrB,EAAKN,kBAAkBe,EAAIpB,KAEnCoB,EAAIjB,UAKbS,eAjCoBqB,IAAMC,WA+DhCC,6MACJC,MAAQ,CACNtB,MAAO,MACPhB,QAAS,WACTuC,SAAU,GACVC,KAAM,GACNC,KAAM,EACNC,YAAa,MAGfC,kBAAoB,SAAClC,EAAOD,GAC1B,IAAMR,EAAUQ,EACZQ,EAAQ,OAER4B,EAAKN,MAAMtC,UAAYQ,GAAiC,SAArBoC,EAAKN,MAAMtB,QAChDA,EAAQ,OAGV4B,EAAKC,SAAS,CAAE7B,QAAOhB,eAGzB8C,qBAAuB,SAAArC,GACjBA,EAAMsC,OAAOC,QACfJ,EAAKC,SAAS,SAAAP,GAAK,MAAK,CAAEC,SAAUD,EAAME,KAAKnB,IAAI,SAAA4B,GAAC,OAAIA,EAAE/C,QAG5D0C,EAAKC,SAAS,CAAEN,SAAU,QA4B5BW,iBAAmB,SAACzC,EAAOgC,GACzBG,EAAKC,SAAS,CAAEJ,YAGlBU,wBAA0B,SAAA1C,GACxBmC,EAAKC,SAAS,CAAEH,YAAajC,EAAMsC,OAAOK,WAG5CC,WAAa,SAAAnD,GAAE,OAAyC,IAArC0C,EAAKN,MAAMC,SAASe,QAAQpD,MAE/CqD,aAAe,SAACC,EAAMC,GACpBC,IACGC,IADH,uDAAAC,OAE2DJ,EAF3D,wBAAAI,OAEsFhE,IAEnFiE,KAAK,SAAAC,GACJlB,EAAKC,SACH,CACEkB,UAAWD,EAAItB,KAAKwB,KACpBC,MAAM,EACNC,UAAWT,GAEb,WACEb,EAAKuB,yBAIVC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,QAIlBF,mBAAqB,WACnB,IAAIX,EAAOZ,EAAKN,MAAMyB,UAAUS,OAAO,SAAAC,GAAC,OAAIA,EAAEC,OAAOC,SAAS,cAE9D/B,EAAKC,SAAS,CAAEkB,UAAWP,IAC3Bc,QAAQC,IAAIf,MAGdoB,YAAc,WACZhC,EAAKC,SAAS,CAAEoB,MAAM,wFAjEJ,IACdY,EAAKC,EADSC,EAAAjE,KAElBkE,UAAUC,YAAYC,mBACpB,SAAAC,GACEN,EAAMM,EAAIC,OAAOC,SACjBP,EAAMK,EAAIC,OAAOE,UACjB5B,IACGC,IADH,oDAAAC,OAEwDiB,EAFxD,SAAAjB,OAEmEkB,EAFnE,+BAAAlB,OAEoGhE,IAEjGiE,KAAK,SAAAC,GACJiB,EAAKlC,SAAS,CACZL,KAAMsB,EAAItB,KAAKwB,SAGlBI,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAGlB,SAAAA,GACEC,QAAQC,IAAIF,sCA+CT,IAAAkB,EAAAzE,KACC0E,EAAY1E,KAAKH,MAAjB6E,QADDC,EAUH3E,KAAKwB,MAPPE,EAHKiD,EAGLjD,KACAxB,EAJKyE,EAILzE,MACAhB,EALKyF,EAKLzF,QACAuC,EANKkD,EAMLlD,SACAG,EAPK+C,EAOL/C,YACAD,EARKgD,EAQLhD,KACAwB,EATKwB,EASLxB,KAEIyB,EACJhD,EAAciD,KAAKC,IAAIlD,EAAaF,EAAKqD,OAASpD,EAAOC,GAE3D,OACEzB,EAAAnB,EAAAoB,cAAA,WACED,EAAAnB,EAAAoB,cAAA,oEACAD,EAAAnB,EAAAoB,cAAA,yBACAD,EAAAnB,EAAAoB,cAAC4E,EAAAhG,EAAD,CAAOiG,UAAWP,EAAQQ,MACxB/E,EAAAnB,EAAAoB,cAAA,OAAK6E,UAAWP,EAAQS,cACtBhF,EAAAnB,EAAAoB,cAACgF,EAAApG,EAAD,CAAOiG,UAAWP,EAAQW,MAAOC,kBAAgB,cAC/CnF,EAAAnB,EAAAoB,cAACmF,EAAD,CACEC,YAAa/D,EAASsD,OACtB7E,MAAOA,EACPhB,QAASA,EACTY,cAAeE,KAAK6B,kBACpB4D,SAAU/D,EAAKqD,SAEjB5E,EAAAnB,EAAAoB,cAACsF,EAAA1G,EAAD,KAhOd,SAAoB2G,EAAOC,GACzB,IAAMC,EAAiBF,EAAMpF,IAAI,SAACuF,EAAIC,GAAL,MAAe,CAACD,EAAIC,KAMrD,OALAF,EAAeG,KAAK,SAAChH,EAAGC,GACtB,IAAMiB,EAAQ0F,EAAI5G,EAAE,GAAIC,EAAE,IAC1B,OAAc,IAAViB,EAAoBA,EACjBlB,EAAE,GAAKC,EAAE,KAEX4G,EAAetF,IAAI,SAAAuF,GAAE,OAAIA,EAAG,KA0NpBG,CAAWvE,EAvN5B,SAAoBxB,EAAOhB,GACzB,MAAiB,SAAVgB,EACH,SAAClB,EAAGC,GAAJ,OAAUF,EAAKC,EAAGC,EAAGC,IACrB,SAACF,EAAGC,GAAJ,OAAWF,EAAKC,EAAGC,EAAGC,IAoNMgH,CAAWhG,EAAOhB,IACjCiH,MAAMxE,EAAOC,EAAaD,EAAOC,EAAcA,GAC/CrB,IAAI,SAAA4B,GACH,OACEhC,EAAAnB,EAAAoB,cAACE,EAAAtB,EAAD,CAAUoH,UAAW,EAAG1F,IAAKyB,EAAE/C,IAC7Be,EAAAnB,EAAAoB,cAACK,EAAAzB,EAAD,CAAWqH,UAAU,KAAKC,MAAM,OAC9BnG,EAAAnB,EAAAoB,cAACmG,EAAA,EAAD,CACEnF,QAASqD,EAAKhC,aAAa+D,KAAK/B,EAAMtC,EAAE/C,GAAI+C,EAAEQ,OAE7CR,EAAEQ,OAGPxC,EAAAnB,EAAAoB,cAACK,EAAAzB,EAAD,CAAW2B,MAAM,UACdwB,EAAEsE,KAAOtE,EAAEsE,KAAKC,SAAW,IAE9BvG,EAAAnB,EAAAoB,cAACK,EAAAzB,EAAD,CAAW2B,MAAM,UACdwB,EAAEsE,KAAOtE,EAAEsE,KAAKE,SAAW,OAKrC/B,EAAY,GACXzE,EAAAnB,EAAAoB,cAACE,EAAAtB,EAAD,CAAU4H,MAAO,CAAEC,OAAQ,GAAKjC,IAC9BzE,EAAAnB,EAAAoB,cAACK,EAAAzB,EAAD,CAAW8H,QAAS,QAM9B3G,EAAAnB,EAAAoB,cAAC2G,EAAA/H,EAAD,CACEgI,mBAAoB,CAAC,GAAI,IACzBX,UAAU,MACVY,MAAOvF,EAAKqD,OACZnD,YAAaA,EACbD,KAAMA,EACNuF,oBAAqB,CACnBC,aAAc,iBAEhBC,oBAAqB,CACnBD,aAAc,aAEhBE,aAAcrH,KAAKoC,iBACnBkF,oBAAqBtH,KAAKqC,2BAI9BlC,EAAAnB,EAAAoB,cAACmH,EAAAvI,EAAD,CACEwI,WAAW,EACXC,SAAS,KACTtE,KAAMA,EACNuE,QAAS1H,KAAK8D,YACdwB,kBAAgB,yBAChBsB,MAAO,CAAEe,MAAO,SAEhBxH,EAAAnB,EAAAoB,cAACwH,EAAA5I,EAAD,CAAaI,GAAG,0BAAhB,8BAC8BY,KAAKwB,MAAM4B,WAGxCpD,KAAKwB,MAAMyB,WACVjD,KAAKwB,MAAMyB,UAAU1C,IAAI,SAAAmC,GAAI,OAC3BvC,EAAAnB,EAAAoB,cAAA,OAAKwG,MAAO,CAAEiB,OAAQ,sBACpB1H,EAAAnB,EAAAoB,cAAA,OACE6E,UAAU,MACV2B,MAAO,CACLkB,OAAQ,IACRC,QAAS,OACTC,UAAW,SAGb7H,EAAAnB,EAAAoB,cAAA,OAAK6E,UAAU,YACb9E,EAAAnB,EAAAoB,cAAA,YAAO6H,IAAOvF,EAAKkB,QAAQsE,OAAO,QAEpC/H,EAAAnB,EAAAoB,cAAA,OAAK6E,UAAU,YACb9E,EAAAnB,EAAAoB,cAAA,OACEwG,MAAO,CACLuB,QAAS,OACTC,eAAgB,gBAChBC,SAAU,SAGZlI,EAAAnB,EAAAoB,cAAA,oBAAYsC,EAAK+D,KAAKC,SAAtB,UACAvG,EAAAnB,EAAAoB,cAAA,oBAAYsC,EAAK+D,KAAKE,SAAtB,UACAxG,EAAAnB,EAAAoB,cAAA,OACEkI,IAAG,oCAAAxF,OACDJ,EAAK6F,QAAQ,GAAGC,KADf,QAEKC,IAAK/F,EAAK6F,QAAQ,GAAGG,eAGjCvI,EAAAnB,EAAAoB,cAAA,OAAKwG,MAAO,CAAEuB,QAAS,SACrBhI,EAAAnB,EAAAoB,cAAA,qBAAasC,EAAKiG,KAAKC,MAAvB,SAEFzI,EAAAnB,EAAAoB,cAAA,uBACWsC,EAAKmG,OAAOC,IADvB,gBACyCpG,EAAK+D,KAAKsC,eAO7D5I,EAAAnB,EAAAoB,cAAC4I,EAAAhK,EAAD,eAhOYqC,IAAMC,WA2Ob2H,uBAxPA,SAAAC,GAAK,MAAK,CACvBhE,KAAM,CACJyC,MAAO,OACPwB,UAAgC,EAArBD,EAAME,QAAQC,MAE3BhE,MAAO,CACLiE,SAAU,MAEZnE,aAAc,CACZoE,UAAW,UA+OAN,CAAmB1H,GChWnBiI,mLARX,OACErJ,EAAAnB,EAAAoB,cAAA,OAAK6E,UAAU,OACb9E,EAAAnB,EAAAoB,cAACqJ,EAAD,cAJUnI,aCQEoI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7J,EAAAnB,EAAAoB,cAAC6J,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBjG,WACrBA,UAAUkG,cAAcC,MAAMtH,KAAK,SAAAuH,GACjCA,EAAaC","file":"static/js/main.21efee09.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { Button } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\n\nconst API = \"f4b9179473f57889dd83d9c45c269311\";\n\nfunction desc(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction stableSort(array, cmp) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => desc(a, b, orderBy)\n    : (a, b) => -desc(a, b, orderBy);\n}\n\nconst rows = [\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: true,\n    label: \"City\"\n  },\n  {\n    id: \"calories\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Maximum Temperature (in C°)\"\n  },\n  {\n    id: \"fat\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Minimum Temperature (in C°)\"\n  }\n];\n\nclass EnhancedTableHead extends React.Component {\n  createSortHandler = property => event => {\n    this.props.onRequestSort(event, property);\n  };\n\n  render() {\n    const { order, orderBy } = this.props;\n\n    return (\n      <TableHead>\n        <TableRow>\n          {rows.map(\n            row => (\n              <TableCell\n                key={row.id}\n                align={row.label === \"City\" ? \"left\" : \"center\"}\n                sortDirection={orderBy === row.id ? order : false}\n              >\n                <Tooltip\n                  title=\"Sort\"\n                  placement={row.numeric ? \"bottom-end\" : \"bottom-start\"}\n                  enterDelay={300}\n                >\n                  <TableSortLabel\n                    active={orderBy === row.id}\n                    direction={order}\n                    onClick={this.createSortHandler(row.id)}\n                  >\n                    {row.label}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            ),\n            this\n          )}\n        </TableRow>\n      </TableHead>\n    );\n  }\n}\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.string.isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired\n};\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit * 3\n  },\n  table: {\n    minWidth: 1020\n  },\n  tableWrapper: {\n    overflowX: \"auto\"\n  }\n});\n\nclass Weather extends React.Component {\n  state = {\n    order: \"asc\",\n    orderBy: \"calories\",\n    selected: [],\n    data: [],\n    page: 0,\n    rowsPerPage: 10\n  };\n\n  handleRequestSort = (event, property) => {\n    const orderBy = property;\n    let order = \"desc\";\n\n    if (this.state.orderBy === property && this.state.order === \"desc\") {\n      order = \"asc\";\n    }\n\n    this.setState({ order, orderBy });\n  };\n\n  handleSelectAllClick = event => {\n    if (event.target.checked) {\n      this.setState(state => ({ selected: state.data.map(n => n.id) }));\n      return;\n    }\n    this.setState({ selected: [] });\n  };\n\n  componentDidMount() {\n    var lat, lon;\n    navigator.geolocation.getCurrentPosition(\n      pos => {\n        lat = pos.coords.latitude;\n        lon = pos.coords.longitude;\n        axios\n          .get(\n            `https://api.openweathermap.org/data/2.5/find?lat=${lat}&lon=${lon}&cnt=10&units=metric&APPID=${API}`\n          )\n          .then(res => {\n            this.setState({\n              data: res.data.list\n            });\n          })\n          .catch(err => {\n            console.log(err);\n          });\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  handleChangePage = (event, page) => {\n    this.setState({ page });\n  };\n\n  handleChangeRowsPerPage = event => {\n    this.setState({ rowsPerPage: event.target.value });\n  };\n\n  isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n  handleDialog = (city, name) => {\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/forecast?id=${city}&units=metric&APPID=${API}`\n      )\n      .then(res => {\n        this.setState(\n          {\n            city_data: res.data.list,\n            open: true,\n            city_name: name\n          },\n          () => {\n            this.convertToSingleDay();\n          }\n        );\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  convertToSingleDay = () => {\n    var city = this.state.city_data.filter(x => x.dt_txt.includes(\"12:00:00\"));\n\n    this.setState({ city_data: city });\n    console.log(city);\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n  render() {\n    const { classes } = this.props;\n    const {\n      data,\n      order,\n      orderBy,\n      selected,\n      rowsPerPage,\n      page,\n      open\n    } = this.state;\n    const emptyRows =\n      rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n    return (\n      <div>\n        <h3>Weather app for displaying details of nearby 10 cities</h3>\n        <h6>By Kartik V</h6>\n        <Paper className={classes.root}>\n          <div className={classes.tableWrapper}>\n            <Table className={classes.table} aria-labelledby=\"tableTitle\">\n              <EnhancedTableHead\n                numSelected={selected.length}\n                order={order}\n                orderBy={orderBy}\n                onRequestSort={this.handleRequestSort}\n                rowCount={data.length}\n              />\n              <TableBody>\n                {stableSort(data, getSorting(order, orderBy))\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map(n => {\n                    return (\n                      <TableRow tabIndex={-1} key={n.id}>\n                        <TableCell component=\"th\" scope=\"row\">\n                          <Button\n                            onClick={this.handleDialog.bind(this, n.id, n.name)}\n                          >\n                            {n.name}\n                          </Button>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {n.main ? n.main.temp_max : \"\"}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {n.main ? n.main.temp_min : \"\"}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                {emptyRows > 0 && (\n                  <TableRow style={{ height: 49 * emptyRows }}>\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n          <TablePagination\n            rowsPerPageOptions={[10, 25]}\n            component=\"div\"\n            count={data.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            backIconButtonProps={{\n              \"aria-label\": \"Previous Page\"\n            }}\n            nextIconButtonProps={{\n              \"aria-label\": \"Next Page\"\n            }}\n            onChangePage={this.handleChangePage}\n            onChangeRowsPerPage={this.handleChangeRowsPerPage}\n          />\n        </Paper>\n\n        <Dialog\n          fullWidth={true}\n          maxWidth=\"md\"\n          open={open}\n          onClose={this.handleClose}\n          aria-labelledby=\"max-width-dialog-title\"\n          style={{ width: \"100%\" }}\n        >\n          <DialogTitle id=\"max-width-dialog-title\">\n            5 day weather forecast for {this.state.city_name}\n          </DialogTitle>\n\n          {this.state.city_data &&\n            this.state.city_data.map(city => (\n              <div style={{ border: \"1px solid #e1e1e1\" }}>\n                <div\n                  className=\"row\"\n                  style={{\n                    margin: \"0\",\n                    padding: \"10px\",\n                    maxHeight: \"100%\"\n                  }}\n                >\n                  <div className=\"col-md-6\">\n                    <span>{moment(city.dt_txt).format(\"LL\")}</span>\n                  </div>\n                  <div className=\"col-md-6\">\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        flexWrap: \"wrap\"\n                      }}\n                    >\n                      <span>Max: {city.main.temp_max} °C</span>\n                      <span>Min: {city.main.temp_min} °C</span>\n                      <img\n                        src={`https://openweathermap.org/img/w/${\n                          city.weather[0].icon\n                        }.png`} alt={city.weather[0].description}\n                      />\n                    </div>\n                    <div style={{ display: \"flex\" }}>\n                      <span>Wind: {city.wind.speed} m/s</span>\n                    </div>\n                    <span>\n                      clouds: {city.clouds.all}%, Humidity: {city.main.humidity}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n          <DialogContent />\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nWeather.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(Weather);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Weather from \"./Weather\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Weather />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}